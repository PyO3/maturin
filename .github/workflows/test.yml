name: Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install cffi and virtualenv
        run: pip install cffi virtualenv
      - uses: actions-rs/toolchain@v1
        id: rustup
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install aarch64-apple-darwin Rust target
        if: matrix.os == 'macos-latest'
        run: rustup target add aarch64-apple-darwin
      # We use this target in the musl unit test
      - name: Install x86_64-unknown-linux-musl Rust target
        if: matrix.os == 'ubuntu-latest'
        run: rustup target add x86_64-unknown-linux-musl
      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools
      - name: Setup Xcode env
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          sudo xcode-select -s /Applications/Xcode.app
          bindir="$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/bin"
          echo "CC=${bindir}/clang" >> "${GITHUB_ENV}"
          echo "CXX=${bindir}/clang++" >> "${GITHUB_ENV}"
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> "${GITHUB_ENV}"

      # Caching
      # Install gnu-tar because BSD tar is buggy
      # https://github.com/actions/cache/issues/403
      - name: Install GNU tar (Macos)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: maturin-${{ runner.os }}-${{ steps.rustup.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}
      - name: Cache test crates cargo build
        uses: actions/cache@v2
        with:
          path: test-crates/*/target
          key: test-crates-${{ runner.os }}-${{ steps.rustup.outputs.rustc_hash }}-${{ hashFiles('test-crates/*/Cargo.lock') }}

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features password-storage
      - name: cargo test with musl
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features password-storage --target x86_64-unknown-linux-musl
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy-3.7"
      - name: test build pypy wheel
        run: |
          cargo run -- build --no-sdist -i pypy3 -m test-crates/pyo3-mixed-submodule/Cargo.toml
          pypy3 -m pip install --force-reinstall --no-index --find-links test-crates/pyo3-mixed-submodule/target/wheels pyo3-mixed-submodule
          pypy3 -m pip install pytest
          pypy3 -m pytest test-crates/pyo3-mixed-submodule/tests/
      - name: test build pypy wheel with abi3
        run: |
          cargo run -- build --no-sdist -i pypy3 -m test-crates/pyo3-pure/Cargo.toml --cargo-extra-args="-vv"
          pypy3 -m pip install --force-reinstall --no-index --find-links test-crates/pyo3-pure/target/wheels pyo3-pure
          pypy3 -m pip install pytest
          pypy3 -m pytest test-crates/pyo3-pure/test_pyo3_pure.py

  test-auditwheel:
    name: Test Auditwheel
    runs-on: ubuntu-latest
    strategy:
      matrix:
        manylinux: [ '2010', '2014' ]
    env:
      # Install rust in the workspace so it gets mounted into the docker container
      RUSTUP_HOME: .rustup
      CARGO_HOME: .cargo
    steps:
      - uses: actions/checkout@v2
      # actions-rs/toolchain@v1 has some hiccups with the custom installation locations
      - run: curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
      - run: echo "$(pwd)/.cargo/bin" >> $GITHUB_PATH

      # Caching
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: manylinux-cargo-${{ matrix.manylinux }}-${{ steps.rustup.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}
      - name: Cache test crates cargo build
        uses: actions/cache@v2
        with:
          path: test-crates/*/target
          key: manylinux-test-crates-${{ matrix.manylinux }}-${{ steps.rustup.outputs.rustc_hash }}-${{ hashFiles('test-crates/*/Cargo.lock') }}

      # Do a bit of if-switching since the docker url doesn't support substitutions
      - name: Compliant Build
        if: matrix.manylinux == '2010'
        uses: docker://quay.io/pypa/manylinux2010_x86_64
        with:
          entrypoint: /bin/bash
          args: -c "PATH=/github/workspace/.cargo/bin:$PATH tests/manylinux_compliant.sh ${{ matrix.manylinux }}"
      - name: Compliant Build
        if: matrix.manylinux == '2014'
        uses: docker://quay.io/pypa/manylinux2014_x86_64
        with:
          entrypoint: /bin/bash
          args: -c "PATH=/github/workspace/.cargo/bin:$PATH tests/manylinux_compliant.sh ${{ matrix.manylinux }}"

      - name: Incompliant Build
        if: matrix.manylinux == '2014'
        uses: docker://quay.io/pypa/manylinux2014_x86_64
        with:
          entrypoint: /bin/bash
          args: -c "PATH=/github/workspace/.cargo/bin:$PATH tests/manylinux_incompliant.sh ${{ matrix.manylinux }}"

      # Fix permissions from docker for caching
      - run: sudo chown $(id -u):$(id -g) -R target test-crates/*/target

  test-docker:
    name: Test Docker
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: maturin-test-docker-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            maturin-test-docker-${{ runner.os }}-buildx-
      - name: Build
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: maturin
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache
        run: |
          # Temp fix
          # https://github.com/docker/build-push-action/issues/252
          # https://github.com/moby/buildkit/issues/1896
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Cache test crates cargo build
        uses: actions/cache@v2
        with:
          path: test-crates/*/target
          # Dockerfile contains the rustc version
          key: docker-test-crates-${{ hashFiles('Dockerfile', 'test-crates/*/Cargo.lock') }}
      - name: Test the Docker container
        run: ./test-dockerfile.sh
      # Fix permissions from docker for caching
      - run: sudo chown $(id -u):$(id -g) -R test-crates/*/target


  test-cross-compile:
    name: Test Cross Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          # CPython
          - target: aarch64-unknown-linux-gnu
            arch: aarch64
            abi: cp36-cp36m
          - target: armv7-unknown-linux-gnueabihf
            arch: armv7
            abi: cp39-cp39
          - target: s390x-unknown-linux-gnu
            arch: s390x
            abi: cp310-cp310
          # PyPy
          - target: aarch64-unknown-linux-gnu
            arch: aarch64
            abi: pp37-pypy37_pp73
          - target: aarch64-unknown-linux-gnu
            arch: aarch64
            abi: pp38-pypy38_pp73
    steps:
      - uses: actions/checkout@v2
      - name: Build Wheels
        run: |
          echo 'curl -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal
          source ~/.cargo/env
          rustup target add ${{ matrix.platform.target }}
          export PYO3_CROSS_LIB_DIR=/opt/python/${{ matrix.platform.abi }}
          cargo run --target x86_64-unknown-linux-gnu -- build -i python3.9 --release --out dist --no-sdist --target ${{ matrix.platform.target }} -m test-crates/pyo3-mixed/Cargo.toml
          ' > build-wheel.sh
          docker run --rm -v "$PWD":/io -w /io messense/manylinux2014-cross:${{ matrix.platform.arch }} bash build-wheel.sh
