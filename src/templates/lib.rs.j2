{%- if bindings == "pyo3" -%}
use pyo3::prelude::*;

/// Formats the sum of two numbers as string.
#[pyfunction]
fn sum_as_string(a: usize, b: usize) -> PyResult<String> {
    Ok((a + b).to_string())
}

/// A Python module implemented in Rust.
#[pymodule]
fn {{crate_name}}(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;
    Ok(())
}
{%- elif bindings == "rust-cpython" -%}
use cpython::py_module_initializer;

py_module_initializer!({{crate_name}}, |py, m| {
    m.add(py, "__doc__", "Module documentation string")?;
    Ok(())
});
{%- elif bindings == "uniffi" -%}
fn add(a: u32, b: u32) -> u32 {
    a + b
}

uniffi::include_scaffolding!("example");
{%- endif %}
